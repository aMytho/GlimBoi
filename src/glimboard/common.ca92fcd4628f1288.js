"use strict";(self.webpackChunkGlimBoard=self.webpackChunkGlimBoard||[]).push([[592],{5842:(g,u,o)=>{o.d(u,{$:()=>h});var s=o(5861);let i={name:"Default Board",description:"The default board created",id:0,columns:12,rowHeight:25,squish:null,buttons:[{dimensions:{height:5,width:5,positionX:1,positionY:1},h:5,w:5,id:"0",instructions:[{action:"Message",data:{message:"Hello world from default button!"}}],name:"Default Button",x:1,y:1,img:null}]};var n=o(1571),c=o(9274),f=o(8010);let h=(()=>{class a{constructor(t,e){this.apiService=t,this.notification=e,this.config={columns:12,rowHeight:25,squish:null},this.allBoards=[],this.getBoards()}getBoards(){var t=this;return(0,s.Z)(function*(){let e=yield t.apiService.sendHTTPRequest("boards","GET",{});if(console.log(e),e.result){if(0==e.result.length){console.log("Recieved boards but none exist.");let r=t.notification.open("No boards were found. Creating a default one...","Close",{panelClass:["bg-blue-400"],duration:7e3});setTimeout(()=>{t.createDefaultBoard(),r.dismiss()},4e3)}t.allBoards=e.result}else t.notification.open("Failed to retrieve board information.","Close",{panelClass:["bg-red-400"],duration:7e3});return e.result||[]})()}get boards(){return this.boards}get activeBoard(){return this.allBoards[0]}get getConfig(){return this.config}setConfig(t){this.config=t}removeBoard(t){var e=this;return(0,s.Z)(function*(){let r=yield e.apiService.sendHTTPRequest("boards","DELETE",{id:t});r.result&&1==r.result.removed?(e.notification.open("Board deleted.","Close",{panelClass:["bg-green-400"],duration:7e3}),e.allBoards=e.allBoards.filter((l,d)=>l.id!=t)):e.notification.open("Failed to delete board.","Close",{panelClass:["bg-red-400"],duration:7e3})})()}updateBoard(){var t=this;return(0,s.Z)(function*(){t.activeBoard.buttons=t.stripProps(t.activeBoard.buttons),null==(yield t.apiService.sendHTTPRequest("boards","PATCH",t.activeBoard)).result&&t.notification.open("Failed to update board.","Close",{panelClass:["bg-red-400"],duration:7e3})})()}createBoard(t){var e=this;return(0,s.Z)(function*(){return null==(yield e.apiService.sendHTTPRequest("boards","POST",t)).result?(e.notification.open("Failed to create board.","Close",{panelClass:["bg-red-400"],duration:7e3}),!1):(e.notification.open("Board created!.","Close",{panelClass:["bg-green-400"],duration:7e3}),!0)})()}createDefaultBoard(){this.allBoards.push(i),this.createBoard(i)}createBoardWithName(t){let e=Object.assign({},i);e.name=t,e.id=this.getNewId(),console.log(e),this.createBoard(e).then(r=>{r&&this.allBoards.unshift(e)})}checkIfBoardExists(t){return this.allBoards.find(e=>e.name==t)}setActiveBoard(t){let e=0,r=this.allBoards.filter((l,d)=>l.id==t&&(e=d,!0));r&&this.allBoards.splice(e,1),this.allBoards.unshift(r[0]),console.log(this.allBoards)}getNewId(){let t=[];return this.allBoards.forEach(e=>t.push(e.id)),t.sort((e,r)=>e<r?1:r<e?-1:0),t[0]+1}stripProps(t){return t.map(e=>(delete e.editable,e))}}return a.\u0275fac=function(t){return new(t||a)(n.LFG(c.s),n.LFG(f.ux))},a.\u0275prov=n.Yz7({token:a,factory:a.\u0275fac,providedIn:"root"}),a})()}}]);